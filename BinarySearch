Case 1: search for a target in array and if target doesn't exist return -1
Example 1:
nums= [1,2,4,5,6], target= 3
output= -1

Example 2:
nums= [1,2,4,5,6], target= 2
output= 1

public int binarSearch(int[] nums, int target) {
  int start= 0, end= nums.length-1;     
  
  while(end>=start){
    int mid= start+ (end-start)/2;       
    
    if(target==nums[mid]){
      return mid;
    } else if(target>nums[mid]){
      start= mid+1;
    } else {
      end= mid-1;
    }
  }
        
  return -1;
}
--------------------------------------------------------------------------------------------------------------------------------------
Case 2: search for a target in array (a) if target exist return the index of target (b) if target doesn't exist
return the index of next greater number than traget (c) if greater number doesn't exist return the index of last number
Example 1:
nums= [1,2,4,5,6], target= 4
output= 2

Example 2:
nums= [1,2,2,4,5,6], target= 2
output= 1

Example 3:
nums= [1,2,4,5,6], target= 3
output= 2

Example 4:
nums= [1,2,4,5,6], target= 8
output= 4

Example 5:
nums= [1,2,4,5,6], target= -3
output= 0

public int binarySearch(int[] nums, int target) {
	int start= 0, end= nums.length-1;

	while(end>start) {
		int mid= start+ (end-start)/2;
			
		if(target>nums[mid]) {
			start= mid+1;
		} else {
			end= mid;
		}
	}	

//we can return either start or end; both works.
return end;
}
--------------------------------------------------------------------------------------------------------------------------------------
Case 3: Find particular pair in array i.e. find minimun in rotated sorted array (Leet Code 153).
Example 1:
nums = [3,4,5,1,2]
output: 3

Example 2:
nums = [4,5,6,7,0,1,2]
output: 4

Example 3:
nums = [11,13,15,17]
output: 0

public int findMin(int[] nums) {
  //check if single element or if array is not rotated
  if(nums.length==1 || nums[0]<nums[nums.length-1])
    return nums[0];
        
  int start=0, end= nums.length-1;
  int mid= 0;
        
  while(end>start){
    mid= start+ (end-start)/2;       
    
    if (nums[mid]>nums[start]){
      start= mid;
    } else {
      end= mid;
    }
  }
  
  return nums[mid+1];
}
